Index: kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java
===================================================================
--- kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java	(revision 106113)
+++ kernel-impl/src/main/java/org/sakaiproject/authz/impl/DbAuthzGroupService.java	(working copy)
@@ -50,6 +50,7 @@
 import org.sakaiproject.entity.api.Reference;
 import org.sakaiproject.entity.cover.EntityManager;
 import org.sakaiproject.event.api.Event;
+import org.sakaiproject.event.api.NotificationService;
 import org.sakaiproject.javax.PagingPosition;
 import org.sakaiproject.memory.api.Cache;
 import org.sakaiproject.memory.api.MemoryService;
@@ -1636,11 +1637,33 @@
 			// Would be better to get this initially to make the code more efficient, but the realms collection
 			// does not have a common order for the site's id which is needed to determine if the session variable exists
 			String roleswap = SecurityService.getUserEffectiveRole(siteRef);
-			
+			//Delegated access essentially behaves like roleswap except instead of just specifying which role, you can also specify
+			//the realm as well.  The access map is populated by an Event Listener that listens for dac.checkaccess and is stored in the session
+			//attribute: delegatedaccess.accessmap.  This is a map of: SiteRef -> String[]{realmId, roleId}.  Delegated access
+			//will defer to roleswap if it's set.
+			if(siteRef != null && sessionManager().getCurrentSession().getAttribute("delegatedaccess.accessmapflag") != null
+					&& (sessionManager().getCurrentSession().getAttribute("delegatedaccess.accessmap") == null 
+						|| !((Map) sessionManager().getCurrentSession().getAttribute("delegatedaccess.accessmap")).containsKey(siteRef))){
+				//the delegatedaccess.accessmapflag is set during login and is only set for user's who have some kind of delegated access
+				//if the user has access somewhere but either the map is null or there isn't any record for this site, then that means
+				//this site hasn't been checked yet.  By posting an event, a DelegatedAccess observer will check this site's access for this user 
+				//and store it in the user's session
+				eventTrackingService().post(eventTrackingService().newEvent("dac.checkaccess", siteRef, false, NotificationService.NOTI_REQUIRED));
+			}
+			//grab the session after the checkaccess event since the checkaccess event could have modified it
+			Object delegatedAccessMap = sessionManager().getCurrentSession().getAttribute("delegatedaccess.accessmap");
+			String[] delegatedAccessGroupAndRole = null;
+			if(siteRef != null && delegatedAccessMap != null && delegatedAccessMap instanceof Map){
+				if(((Map) delegatedAccessMap).containsKey(siteRef) && ((Map) delegatedAccessMap).get(siteRef) instanceof String[]){
+					delegatedAccessGroupAndRole = (String[]) ((Map) delegatedAccessMap).get(siteRef);
+				}
+			}
+			boolean delegatedAccess = delegatedAccessGroupAndRole != null && delegatedAccessGroupAndRole.length == 2;
 			List results = null;
 			
 			// Only check roleswap if the method is being called for the current user
-			if (roleswap != null && userId != null && userId.equals(sessionManager().getCurrentSessionUserId()))
+			if ((roleswap != null || delegatedAccess)
+					&& userId != null && userId.equals(sessionManager().getCurrentSessionUserId()))
             {
 				
 				// First check in the user's own my workspace site realm if it's in the list
@@ -1653,9 +1676,18 @@
 				// Then check the site where there's a roleswap effective
 				
 				Object[] fields2 = new Object[3];
-				fields2[0] = roleswap;
+				if(roleswap != null)
+					fields2[0] = roleswap;
+				else if(delegatedAccess){
+					//set the role for delegated access
+					fields2[0] = delegatedAccessGroupAndRole[1];
+				}
 				fields2[1] = lock;
-				fields2[2] = siteRef;
+				if(roleswap == null && delegatedAccess)
+					//set the realm for delegated access
+					fields2[2] = delegatedAccessGroupAndRole[0];
+				else
+					fields2[2] = siteRef;
 
 				statement = dbAuthzGroupSql.getCountRoleFunctionSql();
 				
@@ -1686,7 +1718,7 @@
 					return true;
 				
 				// Then check the rest of the realms. For example these could be subfolders under /content/group/...
-				
+				if(roleswap != null){
 				for (String realmId : realms)
 				{
 					if (realmId == siteRef || realmId == userSiteRef) // we've already checked these so no need to do it again
@@ -1719,7 +1751,7 @@
 					if (rv) // if true, go ahead and return
 						return true;
 				}
-				
+				}
 				// No successful results for roleswap
 				return false;
             }
